group java;

factory(package,objects) ::= <<
<if(package)>package <package>;<endif>

import org.vafer.drift.DriftObject;
import org.vafer.drift.DriftObjectFactory;
import org.vafer.drift.protocol.fields.TObject;

public final class ObjectFactory implements DriftObjectFactory {

	private final static ObjectFactory instance = new ObjectFactory();

	private ObjectFactory() {
	}

	public static ObjectFactory getInstance() {
		return instance;
	}

	public DriftObject createDriftObject( TObject object ) {
   
   		<objects:{ o |
   		if ("<o.name>".equals(object.name)) {
   			return new <o.name>(); 
   		}
    	}; separator="\n">

		return null;
	}
}
>>

object(package,baseClass,name,parents,attributes,slots,migration) ::= <<
<if(package)>package <package>;<endif>

import org.vafer.drift.*;
import org.vafer.drift.protocol.*;
import org.vafer.drift.protocol.fields.*;
import org.vafer.drift.utils.ProtocolUtils;
import <baseClass>;

<if(parents)>// extends <parents; separator=","><endif>
public final class <name> extends <baseClass> {

	private static final long serialVersionUID = 1L;
 
    <attributes:{ a |
    private <(declMap.(a.type))(a.type)> a<a.name; format="capitalizeFirst">;
    }; separator="\n">


	public <name>() {
	}
	
	public <name>( final <name> other ) throws DriftException {
		readFromDriftObject(other);		
	}

    <parents:{ p |
	public <name>( final <p> other ) throws DriftException {		
		readFromDriftObject(other);		
	}    
    }>
 
    <attributes:{ a |
    public <(declMap.(a.type))(a.type)> get<a.name; format="capitalizeFirst">() {
         return a<a.name; format="capitalizeFirst">;
    }
     
    public void set<a.name; format="capitalizeFirst">( final <(declMap.(a.type))(a.type)> a<a.name; format="capitalizeFirst"> ) {
         this.a<a.name; format="capitalizeFirst"> = a<a.name; format="capitalizeFirst">;
    }
    
    }>
 
 	public void read( final Protocol iprot) throws DriftException {
		TAttribute field;

		for(;;) {
			field = iprot.readAttributeBegin();
			if (field.type == TType.STOP) { 
				break;
			}
			switch (field.id) {

		    <slots:{ s |        	
				case <s.slotNumber>: { // <s>
				
					<(readMap.(s.type))(s)>
					
					<open(s)>tmp<close(s)> ;

					} break;
					
		    }; separator="\n">

			default:
				ProtocolUtils.skip(iprot, field.type);			
			}
			iprot.readAttributeEnd();
		}
	}

	public void write( final Protocol oprot) throws DriftException {

		final TObject object = new TObject("<name>");
		oprot.writeObjectBegin(object);

        <attributes:{ a | <(writeMap.(a.type))(a)> }>
		
		oprot.writeAttributeStop();				
		oprot.writeObjectEnd();	
	}
	
	public int hashCode() {
		final int prime = 31;
		int result = 1;

        <attributes:{ a |
        <(hashcodeMap.(a.type))(a)>
        }>

		return result;
	}
	
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null)
			return false;
		if (getClass() != o.getClass())
			return false;
		final <name> other = (<name>) o;

        <attributes:{ a |
        <(equalsMap.(a.type))(a)>
        }>

		return true;
	}
	
	public int compareTo(Object o) {
		return 0;
	}
}
>>

open(x) ::= <<
  <if(x.childs)>
    <x.childs:{ y | 
      <open(y)>
      Migration.getInstance().convert_<slotid(x)>_to_<slotid(y)>(
    }>
  <else> 
    this.a<x.name; format="capitalizeFirst"> = 
  <endif>
>>

close(x) ::= <<
  <if(x.childs)>
    <x.childs:{ y | <close(y)> ) }>
  <endif>
>>

slotid(slot) ::= <<
<if (slot.slotName)><slot.slotName><else><slot.slotNumber; format="negative"><endif>
>>

hashcodeBOOL(a) ::= <<
	result = prime * result + (a<a.name; format="capitalizeFirst"> ? 1231 : 1237);
>>
hashcodeBYTE(a) ::= <<
	result = prime * result + a<a.name; format="capitalizeFirst">;
>>
hashcodeDOUBLE(a) ::= <<
	{  
		long temp;
		temp = Double.doubleToLongBits(a<a.name; format="capitalizeFirst">);
		result = prime * result + (int) (temp ^ (temp \>\>\> 32));
	}
>>
hashcodeI16(a) ::= <<
	result = prime * result + a<a.name; format="capitalizeFirst">;
>>
hashcodeI32(a) ::= <<
	result = prime * result + a<a.name; format="capitalizeFirst">;
>>
hashcodeI64(a) ::= <<
	result = prime * result + (int) (a<a.name; format="capitalizeFirst"> ^ (a<a.name; format="capitalizeFirst"> \>\>\> 32));
>>
hashcodeSTRING(a) ::= <<
	result = prime * result + ((a<a.name; format="capitalizeFirst"> == null) ? 0 : a<a.name; format="capitalizeFirst">.hashCode());
>>
hashcodeOBJECT(a) ::= <<
	result = prime * result + ((a<a.name; format="capitalizeFirst"> == null) ? 0 : a<a.name; format="capitalizeFirst">.hashCode());
>>

equalsBOOL(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> != other.a<a.name; format="capitalizeFirst">) return false;
>>
equalsBYTE(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> != other.a<a.name; format="capitalizeFirst">) return false;
>>
equalsDOUBLE(a) ::= <<
	if (Double.doubleToLongBits(a<a.name; format="capitalizeFirst">) != Double.doubleToLongBits(other.a<a.name; format="capitalizeFirst">)) return false;
>>
equalsI16(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> != other.a<a.name; format="capitalizeFirst">) return false;
>>
equalsI32(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> != other.a<a.name; format="capitalizeFirst">) return false;
>>
equalsI64(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> != other.a<a.name; format="capitalizeFirst">) return false;
>>
equalsSTRING(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> == null) {
			if (other.a<a.name; format="capitalizeFirst"> != null) return false;
	} else if (!a<a.name; format="capitalizeFirst">.equals(other.a<a.name; format="capitalizeFirst">)) {
			return false;
	}
>>
equalsOBJECT(a) ::= <<
	if (a<a.name; format="capitalizeFirst"> == null) {
			if (other.a<a.name; format="capitalizeFirst"> != null) return false;
	} else if (!a<a.name; format="capitalizeFirst">.equals(other.a<a.name; format="capitalizeFirst">)) {
			return false;
	}
>>


writeBOOL(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.BOOL;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeBool(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeBYTE(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.BYTE;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeByte(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeDOUBLE(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.DOUBLE;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeDouble(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeI16(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.I16;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeI16(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeI32(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.I32;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeI32(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeI64(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.I64;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeI64(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeSTRING(a) ::= <<
		{  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.STRING;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			oprot.writeString(this.a<a.name; format="capitalizeFirst">);				
			oprot.writeAttributeEnd();
		}
>>
writeOBJECT(a) ::= <<
		if (this.a<a.name; format="capitalizeFirst"> != null) {  
			final TAttribute field = new TAttribute();
			field.name = "<a.name>";
			field.type = TType.OBJECT;
			field.id = <a.slotNumber>;
			
			oprot.writeAttributeBegin(field);		
			this.a<a.name; format="capitalizeFirst">.write(oprot);				
			oprot.writeAttributeEnd();
		}
>>

readBOOL(a) ::= <<
		final boolean tmp = iprot.readBool();
>>
readBYTE(a) ::= <<
		final byte tmp = iprot.readByte();
>>
readDOUBLE(a) ::= <<
		final double tmp = iprot.readDouble();
>>
readI16(a) ::= <<
		final short tmp = iprot.readI16();
>>
readI32(a) ::= <<
		final int tmp = iprot.readI32();
>>
readI64(a) ::= <<
		final long tmp = iprot.readI64();
>>
readSTRING(a) ::= <<
		final String tmp = iprot.readString();
>>
readOBJECT(a) ::= <<
		final TObject object = iprot.readObjectBegin();
		final DriftObject dobject = ObjectFactory.getInstance().createDriftObject(object);
		dobject.read(iprot);
		
		final <a.type> tmp = (<a.type>) dobject;
		
		iprot.readObjectEnd();
>>


declBOOL(t) ::= << boolean >>
declBYTE(t) ::= << byte >>
declDOUBLE(t) ::= << double >>
declI16(t) ::= << short >>
declI32(t) ::= << int >>
declI64(t) ::= << long >>
declSTRING(t) ::= << String >>
declOBJECT(t) ::= << <t> >>

equalsMap ::= [
        "bool":"equalsBOOL",
        "byte":"equalsBYTE",
        "double":"equalsDOUBLE",
        "int16":"equalsI16",
        "int32":"equalsI32",
        "int64":"equalsI64",
        "string":"equalsSTRING",
        "map":"equalsMAP",
        "set":"equalsSET",
        "list":"equalsLIST",
        default:"equalsOBJECT"
]

hashcodeMap ::= [
        "bool":"hashcodeBOOL",
        "byte":"hashcodeBYTE",
        "double":"hashcodeDOUBLE",
        "int16":"hashcodeI16",
        "int32":"hashcodeI32",
        "int64":"hashcodeI64",
        "string":"hashcodeSTRING",
        "map":"hashcodeMAP",
        "set":"hashcodeSET",
        "list":"hashcodeLIST",
        default:"hashcodeOBJECT"
]

writeMap ::= [
        "bool":"writeBOOL",
        "byte":"writeBYTE",
        "double":"writeDOUBLE",
        "int16":"writeI16",
        "int32":"writeI32",
        "int64":"writeI64",
        "string":"writeSTRING",
        "map":"writeMAP",
        "set":"writeSET",
        "list":"writeLIST",
        default:"writeOBJECT"
]

readMap ::= [
        "bool":"readBOOL",
        "byte":"readBYTE",
        "double":"readDOUBLE",
        "int16":"readI16",
        "int32":"readI32",
        "int64":"readI64",
        "string":"readSTRING",
        "map":"readMAP",
        "set":"readSET",
        "list":"readLIST",
        default:"readOBJECT"
]

declMap ::= [
        "bool":"declBOOL",
        "byte":"declBYTE",
        "double":"declDOUBLE",
        "int16":"declI16",
        "int32":"declI32",
        "int64":"declI64",
        "string":"declSTRING",
        "map":"declMAP",
        "set":"declSET",
        "list":"declLIST",
        default:"declOBJECT"
]